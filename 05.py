in_test_1 = [3, 0, 4, 0, 99]
in_test_2 = [1002, 6, 3, 6, 4, 6, 33]
in_main = [
    3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1002, 114, 46, 224, 1001, 224, -736, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 3, 224, 1, 223, 224, 223, 1, 166, 195, 224, 1001, 224, -137, 224, 4, 224, 102, 8, 223, 223, 101, 5, 224, 224, 1, 223, 224, 223, 1001, 169, 83, 224, 1001, 224, -90, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 2, 224, 1, 224, 223, 223, 101, 44, 117, 224, 101, -131, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 5, 224, 224, 1, 224, 223, 223, 1101, 80, 17, 225, 1101, 56, 51, 225, 1101, 78, 89, 225, 1102, 48, 16, 225, 1101, 87, 78, 225, 1102, 34, 33, 224, 101, -1122, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 7, 224, 224, 1, 223, 224, 223, 1101, 66, 53, 224, 101, -119, 224, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 5, 224, 1, 223, 224, 223, 1102, 51, 49, 225, 1101, 7, 15, 225, 2, 110, 106, 224, 1001, 224, -4539, 224, 4, 224, 102, 8, 223, 223, 101, 3, 224, 224, 1, 223, 224, 223, 1102, 88, 78, 225, 102, 78, 101, 224, 101, -
    6240, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 5, 224, 224, 1, 224, 223, 223, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 1107, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 329, 101, 1, 223, 223, 1108, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 344, 101, 1, 223, 223, 8, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 359, 1001, 223, 1, 223, 1007, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 374, 101, 1, 223, 223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 389, 1001, 223, 1, 223, 1108, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 404, 1001, 223, 1, 223, 1007, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 419, 1001, 223, 1, 223, 1107, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 434, 101, 1, 223, 223, 108, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 449, 1001, 223, 1, 223, 1107, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 464, 1001, 223, 1, 223, 108, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 479, 1001, 223, 1, 223, 1008, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 494, 101, 1, 223, 223, 108, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 509, 1001, 223, 1, 223, 8, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 524, 101, 1, 223, 223, 7, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 539, 101, 1, 223, 223, 7, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 554, 1001, 223, 1, 223, 7, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 569, 101, 1, 223, 223, 107, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 584, 101, 1, 223, 223, 1108, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 599, 1001, 223, 1, 223, 1008, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 614, 1001, 223, 1, 223, 8, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 629, 1001, 223, 1, 223, 107, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 644, 101, 1, 223, 223, 1007, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 659, 101, 1, 223, 223, 107, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 674, 1001, 223, 1, 223, 4, 223, 99, 226
]

in_test_3 = [
    3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31,
    1106, 0, 36, 98, 0, 0, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104,
    999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20, 1105, 1, 46, 98, 99
]


def add(code, index):
    opp_str = '{:05d}'.format(code[index])
    a = code[code[index+1]] if opp_str[2] == '0' else code[index+1]
    b = code[code[index+2]] if opp_str[1] == '0' else code[index+2]
    code[code[index+3]] = a+b
    return index+4


def mul(code, index):
    opp_str = '{:05d}'.format(code[index])
    a = code[code[index+1]] if opp_str[2] == '0' else code[index+1]
    b = code[code[index+2]] if opp_str[1] == '0' else code[index+2]
    code[code[index+3]] = a*b
    return index+4


def load_in(code, index):
    code[code[index+1]] = int(input('>>> '))
    return index+2


def print_out(code, index):
    opp_str = '{:03d}'.format(code[index])
    print(code[code[index+1]] if opp_str[0] == '0' else code[index+1])
    return index+2


def if_true(code, index):
    opp_str = '{:04d}'.format(code[index])
    a = code[code[index+1]] if opp_str[1] == '0' else code[index+1]
    b = code[code[index+2]] if opp_str[0] == '0' else code[index+2]
    return b if a else index+3


def if_false(code, index):
    opp_str = '{:04d}'.format(code[index])
    a = code[code[index+1]] if opp_str[1] == '0' else code[index+1]
    b = code[code[index+2]] if opp_str[0] == '0' else code[index+2]
    return index+3 if a else b


def less_than(code, index):
    opp_str = '{:05d}'.format(code[index])
    a = code[code[index+1]] if opp_str[2] == '0' else code[index+1]
    b = code[code[index+2]] if opp_str[1] == '0' else code[index+2]
    code[code[index+3]] = 1 if a < b else 0
    return index+4


def equals(code, index):
    opp_str = '{:05d}'.format(code[index])
    a = code[code[index+1]] if opp_str[2] == '0' else code[index+1]
    b = code[code[index+2]] if opp_str[1] == '0' else code[index+2]
    code[code[index+3]] = 1 if a == b else 0
    return index+4


def exec_code(code):
    code = list(code)
    index = 0
    while code[index] != 99:
        # print(code[:index])
        if code[index] % 100 == 1:
            index = add(code, index)
        elif code[index] % 100 == 2:
            index = mul(code, index)
        elif code[index] % 100 == 3:
            index = load_in(code, index)
        elif code[index] % 100 == 4:
            index = print_out(code, index)
        elif code[index] % 100 == 5:
            index = if_true(code, index)
        elif code[index] % 100 == 6:
            index = if_false(code, index)
        elif code[index] % 100 == 7:
            index = less_than(code, index)
        elif code[index] % 100 == 8:
            index = equals(code, index)

    return code


def part_1(code):
    return exec_code(code)


def part_2(code):
    return exec_code(code)


print('Part 1:', part_1(in_test_1))
print('Part 1:', part_1(in_test_2))
print('Part 1 (>>> 1):', part_1(in_main))
print('Part 2:', part_2(in_test_3))
print('Part 2 (>>> 5):', part_2(in_main))
